source('~/.active-rstudio-document')
train <- read.table("/home/kate/final/en_US/train.txt", header = TRUE, stringsAsFactors = FALSE, fill=TRUE)
colnames(train)
options( java.parameters = "-Xmx24g" );
library(RWeka); library(dplyr)
# Tokenizing function
tok = function(x) NGramTokenizer(x, Weka_control(min = 1, max = 4, delimiters=' '))
# Term Frequency Evaluation
eval_tf <- function (input) {
data <- data.frame(src = input);
data$pre <- tolower(data$src);
# All the numbers
data$pre <- gsub("[0-9#][^ ]*", " TN ", data$pre);
# Multiple spaces to a single space
data$pre <- gsub(" +", " ", data$pre);
# Replace punctuations (..., ., ?, !) with a special token
data$pre <- gsub("[\\.\\?\\!]+", " TS ", data$pre);
# Filter out words only (maybe some numbers if still left)
data$pre <- gsub("[^A-Za-z0-9' ]", " ", data$pre);
# Space series again
data$pre <- gsub(" +", " ", data$pre);
tokens <- tok(data$pre);
tf = data.frame(w = as.character(tokens), f = 1, stringsAsFactors=FALSE);
tfl = dplyr::summarise(group_by(tf, w), f = sum(f));
return (tfl);
}
# Learn dictionaries with data chunks
set.seed(4759)
# Merge dictionaries
merge_tfs <- function (t1, t2) {
print(paste0("Merge"))
return(dplyr::summarise(group_by(rbind(t1, t2), w), f = sum(f)));
}
eval_all <- function(input, n, m){
if (m - n > 50000) {
z = (n + m) / 2;
return(merge_tfs(eval_all(input, n, z), eval_all(input, z, m)));
}
else
{
print(paste0("Eval from ", n, " to ", m))
return(eval_tf(input[c(n:(m-1)), ]));
}
}
tf_tab <- eval_all(train, 1, length(train[ ,1]))
write.table(tf_tab, "/home/kate/final/en_US/tf_tab.txt", sep = "\t");
shiny::runApp('PredictApplication/PredictApplication')
testDict <- read.table("/home/kate/PredictApplication/PredictApplication/data/out1.txt",
stringsAsFactors = FALSE,
header = TRUE,
fill = TRUE)
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
is.na(NA) + is.na(!NA\)
is.na(NA) + is.na(!NA)
is.na(NA) + is.na(NA)
is.na(NA)
!is.na(NA)
!is.na(NA) + !is.na(NA)
is.na(NA) + is.na(!NA)
is.na(!NA)
is.na(NA)
is.na(0)
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 2))
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), "two" == 2))
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), "two" == 2, select = one))
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 2, select = one))
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one))
data.frame("one" = c(1, 2), "two" = c(2, 3))
subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one)
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one))
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one)) == 1
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one)) == 0
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one)) + is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one))
is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one)) + !is.na(subset(data.frame("one" = c(1, 2), "two" = c(2, 3)), two == 3, select = one))
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
View(fullDict)
runApp('PredictApplication/PredictApplication')
View(fullDict)
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
length(data.frame("third"))
length(data.frame("third" == NA))
length(data.frame())
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
install.packages('rsconnect')
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
install.packages('rsconnect')
install.packages("RCurl")
install.packages('rsconnect')
install.packages("RCurl")
rsconnect::setAccountInfo
library(rsconnect\)
library(rsconnect)
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
a <- data.frame("one" = c(1, 2, 5), "two" = c(90, 46, 4))
a
a[sort(two, desc)]
a[sort(two, desc), ]
a[sort("two", desc), ]
a[sort("two", desc)]
a[sort("two", desc = TRUE)]
a[sort("two")]
a[sort("two"), ]
a[sort("two")]
a[a$sort("two")]
a[sort(a$"two")]
a[sort("two")]
a
a[order(two)]
a[order(two), ]
a[order("two"), ]
a[order(a$two), ]
a[order(-a$one), ]
a[order(a$one), ]
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
runApp('PredictApplication/PredictApplication')
install.packages("rsconnect")
install.packages("RCurl")
runApp('PredictApplication/PredictApplication')
install.packages("RCurl")
install.packages("rsconnect")
# Load dictionary
rsconnect::setAccountInfo(name='wfslithtaivs', token='6655045E4370EB92D5E5E958DB43754F', secret='A7b8JD43qT1ZT4R32h5ATw6DedIgHUQeMxVJGIQD')
library(srconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='wfslithtaivs', token='6655045E4370EB92D5E5E958DB43754F', secret='A7b8JD43qT1ZT4R32h5ATw6DedIgHUQeMxVJGIQD')
deployApp()
runApp('PredictApplication/PredictApplication')
deployApp()
getwd()
setwd("/home/kate/PredictApplication/PredictApplication")
deployApp()
rsconnect::setAccountInfo(name='wfslithtaivs', token='6655045E4370EB92D5E5E958DB43754F', secret='A7b8JD43qT1ZT4R32h5ATw6DedIgHUQeMxVJGIQD')
deployApp()
deployApp()
rsconnect::setAccountInfo(name='wfslithtaivs', token='4515C3681B47E2CA817B7662A8DDF435', secret='dBcnFGSwxAdLNUwY/mjIvLNPY7VdvhLkec1I4awo')
getwd()
deployApp()
